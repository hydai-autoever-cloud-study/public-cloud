name: Spring Boot CI/CD with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: public-cloud
  ECS_TASK_DEFINITION: ../workflows/task-definition.json
  CONTAINER_NAME: public-cloud-tpdms
  ECS_SERVICE: public-cloud-service
  ECS_CLUSTER: public-cloud


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      # Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      # Spring boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test
      # docker hub 이미지 배포
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 4. 이미지 업로드
      - name: DockerHub Upload
        env:
          NAME: ${{ secrets.DOCKERHUB_USERNAME}}
          REPO: public-cloud
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:$IMAGE_TAG
          docker push $NAME/$REPO:$IMAGE_TAG

      - name: AWS Role 을 이용한 로그인
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::941377122831:role/public-cloud-image-push-role
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/public-cloud:$IMAGE_TAG .
          docker push $ECR_REGISTRY/public-cloud:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 푸시된 이미지를 가지고 ECS 서비스 재시작
      - name: Fill in the new Image in the ECS task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS task definigion
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true



